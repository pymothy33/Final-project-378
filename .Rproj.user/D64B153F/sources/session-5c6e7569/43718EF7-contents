---
title: "Final Project for Joshua Pym"
---

------------------------------------------------------------------------

This is a Quarto website.

## **Penguin Size and Mass by Sex and Species**

```{r}
library(palmerpenguins)
library(dplyr)
library(ggplot2)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/C25Joshua.Pym/OneDrive - afacademy.af.edu/Documents/Final Project for Joshua Pym/.venv/Scripts/python.exe")
library(reticulate)
use_virtualenv("C:/Users/C25Joshua.Pym/OneDrive - afacademy.af.edu/Documents/Final Project for Joshua Pym/.venv",required=TRUE)

df <- palmerpenguins::penguins
```

------------------------------------------------------------------------

------------------------------------------------------------------------

```{r}
df %>%
  group_by(species, sex) %>%
  summarise(
    across(
      where(is.numeric), 
      \(x) mean(x, na.rm = TRUE)
      )
    ) %>%
  knitr::kable()

```

------------------------------------------------------------------------

------------------------------------------------------------------------

```{r}
df %>%
  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
  geom_point() + 
  geom_smooth(method = "lm")
```

\-\--

## "Model"

\-\--

```{python}
from palmerpenguins import penguins

from pandas import get_dummies

import numpy as np

from sklearn.linear_model import LinearRegression

from sklearn import preprocessing
```

\## Get Data

```{python}
df = penguins.load_penguins().dropna()

df.head(3)
```

```{python}
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)

y = df['body_mass_g']

model = LinearRegression().fit(X, y)
```

\## Get some information

```{python}
print(f"R^2 {model.score(X,y)}")

print(f"Intercept {model.intercept_}")

print(f"Columns {X.columns}")

print(f"Coefficients {model.coef_}")
```

\-\--

## Chapter2

\-\--

```{python}
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
```

```{python}
from pins import board_folder
from vetiver import vetiver_pin_write
b = board_folder('data/model', allow_pickle_read=True)
p = vetiver_pin_write(b, v, versioned=True )
```

```{python}
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype=True)
```

## Chapter 6

```{python}
from vetiver import prepare_docker
prepare_docker(b, 'penguin_model')

```

## Chapter 3

```{python}
import duckdb
from palmerpenguins import penguins

con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.execute('CREATE TABLE penguins AS SELECT * FROM df')
con.close()
```

```{python}
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
```

## Step 2

```{python}
import requests
req_data = {
  "bill_length_mm": 0,
  "species_Chinstrap": False,
  "species_Gentoo": False,
  "sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
```

## Chapter 4

```{python}
import logging

logging.basicConfig(
    format='%(asctime)s - %(message)s',
    level=logging.INFO
)
```

```{python}
def server(input, output, session):
    logging.info("App start")

    @reactive.Calc
    def vals():
        d = {
            "bill_length_mm" : input.bill_length(),
            "sex_male" : input.sex() == "Male",
            "species_Gentoo" : input.species() == "Gentoo", 
            "species_Chinstrap" : input.species() == "Chinstrap"

        }
        return d
    
    @reactive.Calc
    @reactive.event(input.predict)
    def pred():
        logging.info("Request Made")
        r = requests.post(api_url, json = [vals()])
        logging.info("Request Returned")

        if r.status_code != 200:
            logging.error("HTTP error returned")

        return r.json().get('predict')[0]

    @output
    @render.text
    def vals_out():
        return f"{vals()}"

    @output
    @render.text
    def pred_out():
        return f"{round(pred())}"
```

## Chapter 5
